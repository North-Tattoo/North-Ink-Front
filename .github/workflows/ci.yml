on:
  push:
    branches:
    - main
  pull_request:
    branches:
    - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    # Passo 1: Verificar o código
    - name: Checkout code
      uses: actions/checkout@v2

    # Passo 2: Configurar o Node.js
    - name: Set up Node.js 22
      uses: actions/setup-node@v3
      with:
        node-version: '22'

    # Passo 3: Exibir a versão do Node.js
    - name: Node.js version
      run: node --version

    # Passo 4: Limpar o cache do npm
    - name: Clean npm cache
      run: npm cache clean --force

    # Passo 5: Instalar dependências e construir o projeto
    - name: Build project
      run: |
        echo "Entrando no diretório site..."
        cd site
        echo "Instalando dependências..."
        npm install
        echo "Iniciando o processo de build..."
        npm run build
        echo "Build concluído com sucesso!"

    # Passo 6: Compactar os arquivos de build (essa etapa é útil se você for transferir como arquivo .tar.gz)
    - name: Compress build files
      run: |
        echo "Compactando os arquivos de build..."
        tar -czf build.tar.gz -C ./site/dist .

    # Passo 7: Criar o diretório no servidor se não existir e ajustar permissões
    - name: Preparar o diretório de destino no servidor
      uses: appleboy/ssh-action@v0.1.5
      with:
        host: ${{ secrets.EC2_HOST }} # IP do servidor EC2
        username: ${{ secrets.EC2_USER }} # Usuário do servidor
        key: ${{ secrets.EC2_KEY }} # Chave SSH para autenticação
        port: 22 # Porta de SSH
        script: |
          echo "Verificando e criando diretório de destino..."
          sudo mkdir -p /usr/share/nginx/html/dist/
          sudo chown -R www-data:www-data /usr/share/nginx/html/dist/
          sudo chmod -R 755 /usr/share/nginx/html/dist/
          echo "Diretório preparado com sucesso!"

    # Passo 8: Copiar os arquivos diretamente para o diretório onde o NGINX serve os arquivos
    - name: Copiar arquivos de build para o servidor EC2
      uses: appleboy/scp-action@v0.1.5
      with:
        host: ${{ secrets.EC2_HOST }} # IP do servidor EC2
        username: ${{ secrets.EC2_USER }} # Usuário do servidor
        key: ${{ secrets.EC2_KEY }} # Chave SSH para autenticação
        port: 22 # Porta de SSH
        source: ./site/dist/* # Arquivos a serem copiados (conteúdo do build)
        target: /usr/share/nginx/html/dist/ # Destino no servidor EC2
        debug: true # Habilitar debug para verificar detalhes

    # Passo 9: Reiniciar o NGINX no servidor EC2 para que ele recarregue os novos arquivos
    - name: Reiniciar o NGINX
      uses: appleboy/ssh-action@v0.1.5
      with:
        host: ${{ secrets.EC2_HOST }} # IP do servidor EC2
        username: ${{ secrets.EC2_USER }} # Usuário do servidor
        key: ${{ secrets.EC2_KEY }} # Chave SSH para autenticação
        port: 22 # Porta de SSH
        script: |
          echo "Testando configuração do NGINX..."
          sudo nginx -t 
          echo "Reiniciando NGINX..."
          sudo systemctl restart nginx  
          echo "NGINX reiniciado com sucesso!"

    # Passo 10: Verificar o status do NGINX após o reinício
    - name: Verificar status do NGINX
      uses: appleboy/ssh-action@v0.1.5
      with:
        host: ${{ secrets.EC2_HOST }} # IP do servidor EC2
        username: ${{ secrets.EC2_USER }} # Usuário do servidor
        key: ${{ secrets.EC2_KEY }} # Chave SSH para autenticação
        port: 22 # Porta de SSH
        script: |
          echo "Status do NGINX:"
          sudo systemctl status nginx | head -n 20
